name: Android Build with DeepSeek Turbo Recoding

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  recode-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      RECODE_TARGETS: "**/*.kt,**/*.java,src/main/res/layout/*.xml"
      MAX_FILES: 30  # Focus on first 30 files
      MAX_FILE_SIZE: 8000  # 8KB limit
      PARALLEL_JOBS: 4  # Parallel API calls
      MODEL: deepseek-coder-6.7b-instruct  # Faster model

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 50  # Sufficient history for context
        
    # DeepSeek-powered code recoding
    - name: Recode critical files with DeepSeek Turbo
      id: deepseek_recode
      continue-on-error: true
      run: |
        # Install dependencies
        sudo apt-get install -y jq parallel
        pip install regex

        # Find and select target files
        echo "Target patterns: $RECODE_TARGETS"
        files=$(find . -type f \( -name "*.kt" -o -name "*.java" -o -path "./src/main/res/layout/*.xml" \) -size -${MAX_FILE_SIZE}c | head -n $MAX_FILES)
        echo "Selected ${MAX_FILES} files for recoding:"
        echo "$files" | sed 's/^/ - /'
        
        # Backup original files
        mkdir -p original_files
        for file in $files; do
          cp "$file" "original_files/${file//\//_}"
        done
        
        # Create processing script
        cat > recode_worker.sh <<'EOF'
        #!/bin/bash
        file=$1
        
        # Get git context (last 3 commits for this file)
        history=$(git log --pretty=format:"%ad %s" --date=short -n 3 -- "$file")
        
        # Read file content
        content=$(cat "$file")
        
        # Build AI prompt with token optimization
        prompt=$(jq -n \
          --arg history "$history" \
          --arg content "$content" \
          --arg file "$file" \
          '{
            model: env.MODEL,
            messages: [
              {
                role: "system",
                content: "Recode Android file: 1) Fix warnings 2) Optimize performance 3) Modernize practices 4) Keep all functionality. Output ONLY the recoded file content with no explanations."
              },
              {
                role: "user",
                content: ("File: \($file)\nHistory:\n\($history)\n\nCurrent content:\n\($content)")
              }
            ],
            max_tokens: 4096,
            temperature: 0.2
          }')
          
        # Call DeepSeek API
        response=$(curl -s https://api.deepseek.com/v1/chat/completions \
          -H "Authorization: Bearer $DEEPSEEK_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$prompt")
          
        # Extract new content
        new_content=$(echo "$response" | jq -r '.choices[0].message.content')
        
        # Validate and save if improved
        if [ -n "$new_content" ] && [ "$new_content" != "null" ]; then
          # Remove non-code artifacts using regex
          cleaned_content=$(echo "$new_content" | python -c "import sys, re; print(re.sub(r'^```[a-zA-Z]*\n|\n```$', '', sys.stdin.read(), flags=re.MULTILINE))")
          
          # Compare with original
          if [ -n "$cleaned_content" ]; then
            echo "$cleaned_content" > "$file"
            echo "✅ $file"
          else
            echo "⚠️ Empty output for $file"
          fi
        else
          echo "⚠️ No changes for $file"
        fi
        EOF
        
        chmod +x recode_worker.sh
        
        # Process files in parallel
        echo "$files" | parallel -j $PARALLEL_JOBS --bar ./recode_worker.sh {}
        
        # Count modified files
        modified_files=$(git diff --name-only | wc -l)
        echo "modified=$modified_files" >> $GITHUB_OUTPUT
        echo "total_processed=$MAX_FILES" >> $GITHUB_OUTPUT

    - name: Show recoding results
      run: |
        echo "Modified files: ${{ steps.deepseek_recode.outputs.modified }}"
        git diff --stat
        
    # Build process continues
    - name: Setup JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        
    - name: Get Release Version
      id: release
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        
    - name: Build APK
      run: |
        chmod +x gradlew
        ./gradlew :android:packageRelease
        ./gradlew --stop
        
        
    - name: Sign APK
      id: sign_apk
      uses: filippoLeporati93/android-release-signer@v1
      with:
        releaseDirectory: android/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
        alias: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
        keyStorePassword: ${{ secrets.ANDROID_SIGNING_KEY_PWD }}
        keyPassword: ${{ secrets.ANDROID_SIGNING_KEY_PWD }}
      env:
        BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}
        
    - name: Prepare Release Asset
      run: |
        mv ${{ steps.sign_apk.outputs.signedReleaseFile }} \
          android/build/outputs/apk/release/app_${{ steps.release.outputs.release }}.apk
        
    # AI-generated release notes
    - name: Generate Release Notes
      id: release_notes
      env:
        COMMIT_RANGE: $(git describe --tags --abbrev=0)..HEAD
      run: |
        commits=$(git log --pretty=format:"%h %s (%an)" $COMMIT_RANGE)
        
        notes_prompt=$(jq -n \
          --arg commits "$commits" \
          --arg version "${{ steps.release.outputs.release }}" \
          '{
            model: "deepseek-coder",
            messages: [
              {
                role: "system",
                content: "Generate release notes in markdown. Highlight user-facing changes, technical improvements, and recoding enhancements. Use emojis and include version number."
              },
              {
                role: "user",
                content: ("Version: \($version)\nCommits:\n\($commits)\n\nInclude recoding stats: ${{ steps.deepseek_recode.outputs.processed }} files improved by AI")
              }
            ],
            max_tokens: 800
          }')
          
        curl -s https://api.deepseek.com/v1/chat/completions \
          -H "Authorization: Bearer $DEEPSEEK_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$notes_prompt" | jq -r '.choices[0].message.content' > release_notes.md
        
    - name: Publish Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: android/build/outputs/apk/release/app_${{ steps.release.outputs.release }}.apk
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.release.outputs.release }}
        bodyFile: release_notes.md
        allowUpdates: true
        
    # Recoding report
    - name: Create Recoding Report
      uses: actions/github-script@v7
      if: ${{ always() }}
      with:
        script: |
          const diff = require('diff');
          const fs = require('fs');
          
          const report = `
          ### DeepSeek Recoding Report
          **Processed files**: ${{ steps.deepseek_recode.outputs.processed }}
          **Build status**: ${{ job.status }}
          
          #### Sample Changes:
          ${getSampleDiff()}
          
          [Full diff view](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          function getSampleDiff() {
            try {
              const files = '${{ env.RECODE_TARGETS }}'.split(',');
              let sample = '';
              for (const pattern of files) {
                const matches = glob.sync(pattern);
                if (matches.length > 0) {
                  const file = matches[0];
                  const original = fs.readFileSync(`original_${file}`, 'utf8');
                  const modified = fs.readFileSync(file, 'utf8');
                  const differences = diff.diffLines(original, modified);
                  
                  return differences.map(part => 
                    part.added ? `🟢 ${part.value}` : 
                    part.removed ? `🔴 ${part.value}` : ''
                  ).filter(Boolean).slice(0,5).join('');
                }
              }
              return 'No sample diff available';
            } catch (e) {
              return 'Error generating diff: ' + e.message;
            }
          }
          
          core.summary.addRaw(report).write();
