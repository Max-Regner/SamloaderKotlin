name: Android Build with DeepSeek Recoding

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  recode-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      RECODE_TARGETS: "**/*.kt,**/*.java,src/main/res/layout/*.xml"
      MAX_FILE_SIZE: 10000  # 10KB limit for recoding

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for AI context
        
    # DeepSeek-powered code recoding
    - name: Recode UI and source files with DeepSeek
      id: deepseek_recode
      continue-on-error: true
      run: |
        # Install dependencies
        sudo apt-get install -y tree jq
        
        # Find files to recode
        echo "Target patterns: $RECODE_TARGETS"
        files=$(find . -type f \( -name "*.kt" -o -name "*.java" -o -path "./src/main/res/layout/*.xml" \) -size -${MAX_FILE_SIZE}c)
        echo "Files to recode:"
        echo "$files" | tree -F
        
        # Recode each file
        processed=0
        for file in $files; do
          echo "🔁 Recoding $file"
          
          # Get git history context
          history=$(git log --pretty=format:"%h %ad %s" --date=short -n 3 -- $file)
          
          # Read file content
          content=$(cat "$file")
          
          # Build AI prompt
          prompt=$(jq -n \
            --arg history "$history" \
            --arg content "$content" \
            --arg file "$file" \
            '{
              model: "deepseek-coder",
              messages: [
                {
                  role: "system",
                  content: "You are an expert Android developer. Recode the following file to improve code quality, performance, and modern Android practices. Maintain all functionality. Output ONLY the recoded file content with no additional text."
                },
                {
                  role: "user",
                  content: ("File: \($file)\nHistory:\n\($history)\n\nCurrent content:\n\($content)")
                }
              ],
              max_tokens: 4000
            }')
            
          # Call DeepSeek API
          response=$(curl -s https://api.deepseek.com/v1/chat/completions \
            -H "Authorization: Bearer $DEEPSEEK_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$prompt")
          
          # Extract new content
          new_content=$(echo "$response" | jq -r '.choices[0].message.content')
          
          # Validate and save
          if [ -n "$new_content" ] && [ "$new_content" != "null" ]; then
            echo "$new_content" > "$file"
            echo "✅ Recoded $file"
            processed=$((processed+1))
          else
            echo "⚠️ No changes for $file"
          fi
          
          # Avoid rate limiting
          sleep 1
        done
        
        echo "Processed $processed files"
        echo "processed=$processed" >> $GITHUB_OUTPUT

    - name: Show recoding results
      run: |
        git diff --stat
        echo "Total files recoded: ${{ steps.deepseek_recode.outputs.processed }}"
        
    # Build process continues
    - name: Setup JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        
    - name: Get Release Version
      id: release
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        
    - name: Build APK
      run: |
        chmod +x gradlew
        ./gradlew :android:packageRelease
        ./gradlew --stop
        
    - name: Configure Build Tools
      run: |
        BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n1)
        echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
        
    - name: Sign APK
      id: sign_apk
      uses: filippoLeporati93/android-release-signer@v1
      with:
        releaseDirectory: android/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
        alias: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
        keyStorePassword: ${{ secrets.ANDROID_SIGNING_KEY_PWD }}
        keyPassword: ${{ secrets.ANDROID_SIGNING_KEY_PWD }}
      env:
        BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}
        
    - name: Prepare Release Asset
      run: |
        mv ${{ steps.sign_apk.outputs.signedReleaseFile }} \
          android/build/outputs/apk/release/app_${{ steps.release.outputs.release }}.apk
        
    # AI-generated release notes
    - name: Generate Release Notes
      id: release_notes
      env:
        COMMIT_RANGE: $(git describe --tags --abbrev=0)..HEAD
      run: |
        commits=$(git log --pretty=format:"%h %s (%an)" $COMMIT_RANGE)
        
        notes_prompt=$(jq -n \
          --arg commits "$commits" \
          --arg version "${{ steps.release.outputs.release }}" \
          '{
            model: "deepseek-coder",
            messages: [
              {
                role: "system",
                content: "Generate release notes in markdown. Highlight user-facing changes, technical improvements, and recoding enhancements. Use emojis and include version number."
              },
              {
                role: "user",
                content: ("Version: \($version)\nCommits:\n\($commits)\n\nInclude recoding stats: ${{ steps.deepseek_recode.outputs.processed }} files improved by AI")
              }
            ],
            max_tokens: 800
          }')
          
        curl -s https://api.deepseek.com/v1/chat/completions \
          -H "Authorization: Bearer $DEEPSEEK_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$notes_prompt" | jq -r '.choices[0].message.content' > release_notes.md
        
    - name: Publish Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: android/build/outputs/apk/release/app_${{ steps.release.outputs.release }}.apk
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.release.outputs.release }}
        bodyFile: release_notes.md
        allowUpdates: true
        
    # Recoding report
    - name: Create Recoding Report
      uses: actions/github-script@v7
      if: ${{ always() }}
      with:
        script: |
          const diff = require('diff');
          const fs = require('fs');
          
          const report = `
          ### DeepSeek Recoding Report
          **Processed files**: ${{ steps.deepseek_recode.outputs.processed }}
          **Build status**: ${{ job.status }}
          
          #### Sample Changes:
          ${getSampleDiff()}
          
          [Full diff view](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          function getSampleDiff() {
            try {
              const files = '${{ env.RECODE_TARGETS }}'.split(',');
              let sample = '';
              for (const pattern of files) {
                const matches = glob.sync(pattern);
                if (matches.length > 0) {
                  const file = matches[0];
                  const original = fs.readFileSync(`original_${file}`, 'utf8');
                  const modified = fs.readFileSync(file, 'utf8');
                  const differences = diff.diffLines(original, modified);
                  
                  return differences.map(part => 
                    part.added ? `🟢 ${part.value}` : 
                    part.removed ? `🔴 ${part.value}` : ''
                  ).filter(Boolean).slice(0,5).join('');
                }
              }
              return 'No sample diff available';
            } catch (e) {
              return 'Error generating diff: ' + e.message;
            }
          }
          
          core.summary.addRaw(report).write();
